cameras:
    camera1:
        type: perspective
        vanishing_point: [-.25, -.75]
    camera2:
        type: isometric
        axis: [.0, 1.]
        active: true

lights:
    light1:
        type: directional
        diffuse: 1
        ambient: .35

sources:
    mapillary:
        type: MVT
        url:  //d2munx5tg0hw47.cloudfront.net/tiles/{z}/{x}/{y}.mapbox
        max_zoom: 14
    mapzen:
        type: GeoJSON
        url:  //vector.mapzen.com/mapzen/all/{z}/{x}/{y}.json
        url_params:
            api_key: vector-tiles-HqUVidw

layers:
    earth:
        data: { source: mapzen }
        properties: 
            key_text: ""
            value_text: ""
        draw:
            polygons:
                order: 0
                color: [.5, .5, .5]

    water:
        data: { source: mapzen }
        properties: 
            key_text: ""
            value_text: ""
        draw:
            polygons:
                order: 2
                color: [.4, .4, .4]
            lines:
                order: 3
                color: [.5, .5, .5]
                width: 1px

    roads:
        data: { source: mapzen }
        properties: 
            key_text: ""
            value_text: ""
        draw:
            lines:
                interactive: true
                order: 2
                color: '#bbb'
                width: 1px
        red:
            filter: |
                function () {
                    return (
                        properties.key_text &&
                        properties.value_text &&
                        feature[properties.key_text] &&
                        feature[properties.key_text].toLowerCase().indexOf(properties.value_text.toLowerCase()) > -1
                    );
                }
            draw:
                lines:
                    order: 100
                    color: red
                    width: 2px
                text:
                    order: 100
                    text_source: name
                    font:
                        typeface: 10pt Lucida Grande
                        fill: white
                        stroke: { color: black, width: 4 }

    buildings:
        data: { source: mapzen }
        properties: 
            key_text: ""
            value_text: ""
        draw:
            polygons:
                order: 4
                color: '#888'
        red:
            filter: |
                function () {
                    return (
                        properties.key_text &&
                        properties.value_text &&
                        feature[properties.key_text] &&
                        feature[properties.key_text].toLowerCase().indexOf(properties.value_text.toLowerCase()) > -1
                    );
                }
            draw:
                lines:
                    order: 100
                    color: red
                    width: 3px
                text:
                    order: 100
                    text_source: name
                    font:
                        typeface: 10pt Lucida Grande
                        fill: white

    places:
        data: { source: mapzen }
        properties: 
            key_text: ""
            value_text: ""
        draw:
            points:
                order: 11
                color: '#888'
                size: 10px
            text:
                order: 12
                text_source: name
                font:
                    typeface: 10pt Helvetica
                    fill: '#ccc'

    mapillary-sequences:
        data: { source: mapillary }
        filter: |
            function() {
                return (
                    properties.min &&
                    properties.max &&
                    feature.captured_at > properties.min &&
                    feature.captured_at < properties.max
                );
            }
        properties: 
            key_text: ""
            value_text: ""
            newest: '#00ff00'
            oldest: '#0000ff'
            min: 1370000000000
            max: 1469183337901
        draw:
            lines:
                interactive: true
                order: 99
                # color: blue
                color: |
                    function() {
                        if (properties.key_text != "" || properties.value_text != "") return [.5, .5, .5];
                        function hexToRgb(hex) {
                            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                            return result ? {
                                r: parseInt(result[1], 16),
                                g: parseInt(result[2], 16),
                                b: parseInt(result[3], 16)
                            } : null;
                        }

                        function RGBtoHSV(rgb) {
                            var r = rgb.r;
                            var g = rgb.g;
                            var b = rgb.b;
                            var max = Math.max(r, g, b), min = Math.min(r, g, b),
                                d = max - min,
                                h,
                                s = (max === 0 ? 0 : d / max),
                                v = max / 255;

                            switch (max) {
                                case min: h = 0; break;
                                case r: h = (g - b) + d * (g < b ? 6: 0); h /= 6 * d; break;
                                case g: h = (b - r) + d * 2; h /= 6 * d; break;
                                case b: h = (r - g) + d * 4; h /= 6 * d; break;
                            }

                            return {
                                h: h,
                                s: s,
                                v: v
                            };
                        }

                        function HSVtoRGB(h, s, v) {
                            var r, g, b, i, f, p, q, t;
                            i = Math.floor(h * 6);
                            f = h * 6 - i;
                            p = v * (1 - s);
                            q = v * (1 - f * s);
                            t = v * (1 - (1 - f) * s);
                            switch (i % 6) {
                                case 0: r = v, g = t, b = p; break;
                                case 1: r = q, g = v, b = p; break;
                                case 2: r = p, g = v, b = t; break;
                                case 3: r = p, g = q, b = v; break;
                                case 4: r = t, g = p, b = v; break;
                                case 5: r = v, g = p, b = q; break;
                            }
                            return [r, g, b];
                        }

                        var t = feature.captured_at;
                        var min = properties.min 
                        var max = properties.max
                        var newest = properties.newest;
                        var oldest = properties.oldest;

                        var newesthsv = RGBtoHSV(hexToRgb(newest));
                        var oldesthsv = RGBtoHSV(hexToRgb(oldest));

                        var h, s, v;
                        h = ((newesthsv.h - oldesthsv.h) * (t - min))/(max - min) + oldesthsv.h;
                        s = ((newesthsv.s - oldesthsv.s) * (t - min))/(max - min) + oldesthsv.s;
                        v = ((newesthsv.v - oldesthsv.v) * (t - min))/(max - min) + oldesthsv.v;

                        return HSVtoRGB(h, s, v);
                    }
                width: 5px
            text:
                order: 100
                text_source: username
                font:
                    typeface: 14pt Helvetica
                    fill: white
                    stroke: { color: black, width: 2 }
        red:
            filter: |
                function () {
                    return (
                        properties.key_text &&
                        properties.value_text &&
                        feature[properties.key_text] &&
                        feature[properties.key_text].toLowerCase().indexOf(properties.value_text.toLowerCase()) > -1
                    );
                }
            draw:
                lines:
                    order: 100
                    color: red
                    width: 5px
                text:
                    order: 100
                    text_source: username
                    font:
                        typeface: 10pt Helvetica
                        fill: white
                        stroke: { color: black, width: 2 }